info:
  license:
    name: MIT
    url: 'https://github.com/ofte-auth/dogpark/LICENSE.md'
  title: Ofte Dogpark Admin
  version: 0.9.0
  contact:
    email: info@ofte.io
  termsOfService: 'https://github.com/ofte-auth/dogpark/LICENSE.md'
  description: |
    The Ofte Dogpark Admin REST API.
    
    **Note that the base implementation of this API as found in the repo has no authentication mechanism in place.**
openapi: 3.0.0
tags:
  - name: principals
    description: |
      Operations dealing with managed principals (people).
      
      Dogpark manages data for principals that use FIDO keys. We only accept/store public information about the principal. Sensitive passwords and other artifacts are your (or your IDM's) responsibility.
  - name: keys
    description: |
      Operations dealing with the keys generated from FIDO authenticators. 
      
      We only store public key information. There could be multiple keys generated by a single authenticator.
  - name: aaguids
    description: |
      Operations dealing AAGUIDs (authenticator attestation IDs).
      
      AAGUIDs uniquely identify classes of authenticatorsâ€”which provides the ability to allow or block certain authenticators (white/blacklist).
  - name: logs
    description: Operations dealing with auditing logs
servers:
  - url: 'https://localhost:2358'
paths:
  /admin/v1/principals:
    get:
      summary: Get principals (known to Dogpark)
      operationId: get-admin-v1-principals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Principal'
          headers:
            Results-Page:
              $ref: '#/components/headers/resultsPage'
            Results-Limit:
              $ref: '#/components/headers/resultsLimit'
            Results-Total:
              $ref: '#/components/headers/resultsTotal'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '500':
          $ref: '#/components/responses/systemException'
      description: get principals
      tags:
        - principals
      parameters:
        - schema:
            type: boolean
          in: query
          name: hasKeys
          description: Restrict results to principals that have registered keys
        - schema:
            type: string
            enum:
              - createdAt
              - username
              - state
          in: query
          name: orderBy
          description: Order the results
        - $ref: '#/components/parameters/orderDirectionParam'
        - $ref: '#/components/parameters/stateParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sinceParam'
        - $ref: '#/components/parameters/createdBeforeParam'
        - $ref: '#/components/parameters/createdAfterParam'
        - $ref: '#/components/parameters/deepParam'
    post:
      summary: Add a new principal
      operationId: post-admin-v1-principal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: string
                username:
                  type: string
                  example: jane@example.com
                displayName:
                  type: string
                  example: Jane Example
                icon:
                  type: string
                  example: https://example.com/icons/jane.jpg
                state:
                  type: string
                  enum:
                    - active
                    - revoked
              type: object
      responses:
        '201':
          description: If added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Principal'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '500':
          $ref: '#/components/responses/systemException'
      description: update principal
      tags:
        - principals
  /admin/v1/principal/{id}:
    get:
      summary: Get a principal
      operationId: get-admin-v1-principal
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: the id or username of the principal to retrieve
      responses:
        '200':
          description: If found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Principal'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/systemException'
      description: get principal
      tags:
        - principals
    put:
      summary: Update a principal
      operationId: put-admin-v1-principal
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: the id or username of the principal to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.Principal'
      responses:
        '200':
          description: If updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Principal'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/systemException'
      description: update principal
      tags:
        - principals
  /admin/v1/keys:
    get:
      summary: Get keys managed by Dogpark
      operationId: get-admin-v1-keys
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Key'
          headers:
            Results-Page:
              $ref: '#/components/headers/resultsPage'
            Results-Limit:
              $ref: '#/components/headers/resultsLimit'
            Results-Total:
              $ref: '#/components/headers/resultsTotal'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '500':
          $ref: '#/components/responses/systemException'
      description: get keys
      tags:
        - keys
      parameters:
        - schema:
            type: string
            enum:
              - createdAt
              - state
              - lastUsed
              - aaguid
              - notValidBefore
              - notValidAfter
              - principalUsername
              - certCommonName
              - certOrganization
              - certSerial
          in: query
          name: orderBy
          description: Order the results
        - $ref: '#/components/parameters/orderDirectionParam'
        - $ref: '#/components/parameters/stateParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sinceParam'
        - $ref: '#/components/parameters/createdBeforeParam'
        - $ref: '#/components/parameters/createdAfterParam'
  /admin/v1/keys/{id}:
    get:
      summary: Get a FIDO key
      operationId: get-admin-v1-key
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: the id of the key to retrieve
      responses:
        '200':
          description: If found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Key'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/systemException'
      description: get key
      tags:
        - keys
    put:
      summary: Update a FIDO key
      operationId: put-admin-v1-key
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: the id of the FIDO key to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.Key'
      responses:
        '200':
          description: If updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Key'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/systemException'
      description: update key
      tags:
        - keys
    delete:
      summary: Delete a FIDO key
      operationId: delete-admin-v1-key
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: the id of the FIDO key to delete
      responses:
        '204':
          description: If deleted
        '400':
          $ref: '#/components/responses/invalidRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/systemException'
      description: delete key
      tags:
        - keys
  /admin/v1/aaguids:
    get:
      summary: Get aaguids managed by Dogpark
      operationId: get-admin-v1-aaguids
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.AAGUID'
          headers:
            Results-Page:
              $ref: '#/components/headers/resultsPage'
            Results-Limit:
              $ref: '#/components/headers/resultsLimit'
            Results-Total:
              $ref: '#/components/headers/resultsTotal'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '500':
          $ref: '#/components/responses/systemException'
      description: get aaguids
      tags:
        - aaguids
      parameters:
        - schema:
            type: string
            enum:
              - state
          in: query
          name: orderBy
          description: Order the results
        - $ref: '#/components/parameters/orderDirectionParam'
        - $ref: '#/components/parameters/stateParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
    post:
      summary: Create a new aaguid
      operationId: post-admin-v1-aaguid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.AAGUID'
      responses:
        '201':
          description: If added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.AAGUID'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '500':
          $ref: '#/components/responses/systemException'
      description: create aaguid
      tags:
        - aaguids
  /admin/v1/aaguid/{id}:
    get:
      summary: Get an aaguid
      operationId: get-admin-v1-aaguid
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
        description: the id the aaguid to retrieve
      responses:
        '200':
          description: If found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.AAGUID'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/systemException'
      description: get aaguid
      tags:
        - aaguids
    put:
      summary: Update an aaguid
      operationId: put-admin-v1-aaguid
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: the id the aaguid to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                label:
                  type: string
                  example: New aaguid for keys
                state:
                  type: string
                  enum:
                    - active
                    - revoked
              type: object
      responses:
        '200':
          description: If updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.AAGUID'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/systemException'
      description: update aaguid
      tags:
        - aaguids
  /admin/v1/aaguids/whitelist:
    get:
      summary: Get whitelisted aaguids
      operationId: get-admin-v1-aaguids-whitelist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        '400':
          $ref: '#/components/responses/invalidRequest'
        '500':
          $ref: '#/components/responses/systemException'
      description: If there is a whitelist, only authenticators that match one of the whitelisted aaguids are valid.
      tags:
        - aaguids
  /admin/v1/aaguids/blacklist:
    get:
      summary: Returns all blacklisted aaguids managed by Dogpark
      operationId: get-admin-v1-aaguids-blacklist
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: uuid
        '400':
          $ref: '#/components/responses/invalidRequest'
        '500':
          $ref: '#/components/responses/systemException'
      description: If there is a blacklist, authenticators that match one of the blacklisted aaguids will not be valid.
      tags:
        - aaguids
        
  /admin/v1/logs:
    get:
      summary: Get log/audit entries
      description: |
        Dogpark maintains logging for all auth and admin operations.
      operationId: get-admin-v1-logs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Log'
          headers:
            Results-Page:
              $ref: '#/components/headers/resultsPage'
            Results-Limit:
              $ref: '#/components/headers/resultsLimit'
            Results-Total:
              $ref: '#/components/headers/resultsTotal'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '500':
          $ref: '#/components/responses/systemException'
      tags:
        - logs
      parameters:
        - schema:
            type: string
            enum:
              - action
              - group
              - anomaly
              - createdAt
              - aaguid
              - principalId
              - principalUsername
              - certCommonName
              - certOrganization
              - certSerial
          in: query
          name: orderBy
          description: Order the results
        - $ref: '#/components/parameters/orderDirectionParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sinceParam'
        - $ref: '#/components/parameters/createdBeforeParam'
        - $ref: '#/components/parameters/createdAfterParam'
  /admin/v1/logs/{id}:
    get:
      summary: Get a log entry
      operationId: get-admin-v1-log
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: the id of the log entry to retrieve
      responses:
        '200':
          description: If found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Log'
        '400':
          $ref: '#/components/responses/invalidRequest'
        '404':
          $ref: '#/components/responses/notFound'
        '500':
          $ref: '#/components/responses/systemException'
      description: get log entry
      tags:
        - logs
  
components:
  schemas:
    v1.AAGUID:
      properties:
        id:
          format: uuid
          type: string
        label:
          type: string
          example: Yubico U2F Root CA Serial 457200631
        metadata:
          readOnly: true
          format: byte
          type: string
        state:
          type: string
          enum:
            - active
            - revoked
      type: object
    v1.Key:
      type: object
      properties:
        aaguid:
          readOnly: true
          type: string
          format: uuid
        attestationType:
          readOnly: true
          type: string
        certCommonName:
          readOnly: true
          type: string
        certOrganization:
          readOnly: true
          type: string
        certSerial:
          readOnly: true
          format: int64
          type: integer
        createdAt:
          readOnly: true
          format: date-time
          type: string
        id:
          readOnly: true
          type: string
        lastUsed:
          readOnly: true
          format: date-time
          type: string
        modifiedAt:
          readOnly: true
          format: date-time
          type: string
        notValidAfter:
          readOnly: true
          format: date-time
          type: string
        notValidBefore:
          readOnly: true
          format: date-time
          type: string
        principalId:
          readOnly: true
          type: string
        publicKey:
          readOnly: true
          format: byte
          type: string
        state:
          type: string
          enum:
            - active
            - revoked
        username:
          readOnly: true
          type: string
    v1.Log:
      properties:
        group:
          type: string
          example: auth
        action:
          type: string
          example: finishFIDOLogin
        city:
          type: string
          example: Berlin
        country:
          type: string
          example: Germany
        createdAt:
          format: date-time
          type: string
        data:
          type: string
        anomaly:
          type: string
        fidoAAGUID:
          type: string
          format: uuid
        fidoKeyId:
          type: string
        id:
          format: int64
          type: integer
        ipAaddr:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        principalId:
          type: string
        principalUsername:
          type: string
        region:
          type: string
        sessionId:
          type: string
        userAgent:
          type: string
      type: object
    v1.Principal:
      properties:
        createdAt:
          readOnly: true
          format: date-time
          type: string
        displayName:
          type: string
          example: Joe Example
        fidoKeys:
          readOnly: true
          items:
            properties:
              aaguid:
                type: string
              attestationType:
                type: string
              certCommonName:
                type: string
              certOrganization:
                type: string
              certSerial:
                format: int64
                type: integer
              createdAt:
                format: date-time
                type: string
              id:
                format: byte
                type: string
              lastUsed:
                format: date-time
                type: string
              modifiedAt:
                format: date-time
                type: string
              notValidAfter:
                format: date-time
                type: string
              notValidBefore:
                format: date-time
                type: string
              principalId:
                type: string
              publicKey:
                format: byte
                type: string
              state:
                type: string
              username:
                type: string
            type: object
          type: array
        icon:
          type: string
        id:
          readOnly: true
          type: string
        state:
          type: string
          enum:
            - active
            - revoked
        username:
          readOnly: true
          type: string
          example: joe@example.com
      type: object
    Error:
      type: object
      properties:
        code:
          type: integer
        err:
          type: string
        detail:
          type: string
      required:
        - code
        - err
  parameters:
    deepParam:
      name: deep
      in: query
      description: If true, retrieve record-related data in the request
      required: false
      schema:
        type: boolean
        default: false
    limitParam:
      name: limit
      in: query
      description: Maximum number of items to return
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
        default: 20
    pageParam:
      name: page
      in: query
      description: Number of pages to skip before returning the results
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
    orderDirectionParam:
      name: orderDirection
      in: query
      description: Return results in ascending or descending order
      required: false
      schema:
        default: asc
        type: string
        enum:
          - asc
          - desc
    sinceParam:
      name: since
      in: query
      description: 'Restrict results to a recent interval, ie. 1m, 8h, 24h'
      required: false
      schema:
        type: string
    createdBeforeParam:
      name: createdBefore
      in: query
      description: Restrict results to those created before
      required: false
      schema:
        type: string
        format: date-time
    createdAfterParam:
      name: createdAfter
      in: query
      description: Restrict results to those created after date
      required: false
      schema:
        type: string
        format: date-time
    stateParam:
      name: state
      in: query
      description: Restrict results by state
      required: false
      schema:
        type: string
        enum:
          - active
          - revoked
  headers:
    resultsPage:
      schema:
        type: integer
      description: The page that the results represent from results pagination
    resultsLimit:
      schema:
        type: integer
      description: The number of results requested
    resultsTotal:
      schema:
        type: integer
      description: The total number of results available
  responses:
    invalidRequest:
      description: Errors were detected in the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    notFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    systemException:
      description: The system encountered an unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'